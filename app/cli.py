import click
from typing import Optional
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from jose import jwt

from .db.session import SessionLocal
from .core.config import settings
from .core.security import get_password_hash
from .crud.user import UserCRUD
from .tasks.worker import NotificationWorker
from db.models.user import UserRole

@click.group()
def cli():
    pass

@cli.command()
@click.option("--email", prompt="Admin email", help="Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
@click.option("--password", prompt=True, 
              hide_input=True, 
              confirmation_prompt=True,
              help="–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
def create_admin(email: str, password: str):
    db = SessionLocal()
    try:
        user_crud = UserCRUD(db)
        
        if user_crud.get_by_email(email):
            click.echo("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
            
        hashed_password = get_password_hash(password)
        user = user_crud.create(
            email=email,
            hashed_password=hashed_password,
            role=UserRole.ADMIN
        )
        
        db.commit()
        click.echo(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {email} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        click.echo(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}")
        
    except Exception as e:
        db.rollback()
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}")
    finally:
        db.close()

@cli.command()
def init_db():
    from app.db.base import Base
    from app.db.session import engine
    
    try:
        Base.metadata.create_all(bind=engine)
        click.echo("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {str(e)}")

@cli.command()
def run_worker():
    try:
        worker = NotificationWorker()
        click.echo("üöÄ –í–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...")
        worker.run()
    except KeyboardInterrupt:
        click.echo("\nüõë –í–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞: {str(e)}")

@cli.command()
@click.option("--user-id", required=True, help="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
@click.option("--role", default="user", help="–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user/admin)")
@click.option("--expire", default=60, help="–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö")
def generate_token(user_id: str, role: str, expire: int):
    try:
        payload = {
            "sub": user_id,
            "role": role,
            "exp": datetime.now() + timedelta(minutes=expire)
        }
        token = jwt.encode(
            payload,
            settings.JWT_SECRET_KEY,
            algorithm=settings.JWT_ALGORITHM
        )
        click.echo(f"üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:\n{token}")
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")

@cli.command()
def check_services():
    from app.db.session import check_db_connection
    from app.core.redis import ping_redis
    
    click.echo("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    if check_db_connection():
        click.echo("‚úÖ PostgreSQL: –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        click.echo("‚ùå PostgreSQL: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    if ping_redis():
        click.echo("‚úÖ Redis: –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        click.echo("‚ùå Redis: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

if __name__ == "__main__":
    cli()